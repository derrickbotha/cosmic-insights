version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cosmic-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: cosmic-insights
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - cosmic-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/cosmic-insights --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cosmic-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-changeme}@mongodb:27017/cosmic-insights?authSource=admin
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-dev_access_secret_change_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev_refresh_secret_change_in_production}
      JWT_ACCESS_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      CSRF_SECRET: ${CSRF_SECRET:-dev_csrf_secret_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev_encryption_key_32_chars_12}
      COOKIE_SECRET: ${COOKIE_SECRET:-dev_cookie_secret_change_in_prod}
      CORS_ORIGIN: http://localhost:3000,http://localhost:4000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      CLIENT_URL: http://localhost:3000,http://localhost:4000
      ADMIN_EMAILS: admin@cosmicinsights.com
      # Redis configuration for session management
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      LOG_LEVEL: debug
      ANALYTICS_RETENTION_DAYS: 90
      MAX_FILE_SIZE: 5242880
    ports:
      - "5000:5000"
    volumes:
      - ./backend/src:/app/src
      - ./backend/logs:/app/logs
      - backend_node_modules:/app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express (Web GUI for MongoDB)
  mongo-express:
    image: mongo-express:1.0
    container_name: cosmic-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-changeme}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-changeme}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-pass}
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - cosmic-network

  # PostgreSQL for ML Service
  postgres-ml:
    image: postgres:15
    container_name: cosmic-postgres-ml
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cosmic_ml}
      POSTGRES_USER: ${POSTGRES_USER:-mluser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mlpassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_ml_data:/var/lib/postgresql/data
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mluser -d cosmic_ml"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.11.0
    container_name: cosmic-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - cosmic-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: cosmic-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: cosmic-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Admin (Django) - API Management
  backend-admin:
    build:
      context: ./backend-admin
      dockerfile: Dockerfile
    container_name: cosmic-backend-admin
    restart: unless-stopped
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_ADMIN_SECRET:-admin-secret-key-change-in-production}
      DJANGO_DEBUG: "True"
      DJANGO_ALLOWED_HOSTS: localhost,backend-admin,127.0.0.1
      POSTGRES_DB: ${POSTGRES_DB:-cosmic_ml}
      POSTGRES_USER: ${POSTGRES_USER:-mluser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mlpassword}
      POSTGRES_HOST: postgres-ml
      POSTGRES_PORT: 5432
      MONGO_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-changeme}@mongodb:27017
      MONGO_DB_NAME: cosmic-insights
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BACKEND_API_URL: http://backend:5000
      BACKEND_API_KEY: ${BACKEND_API_KEY:-shared-secret-key-123}
      LOG_LEVEL: INFO
    ports:
      - "5001:5001"
    volumes:
      - ./backend-admin:/app
      - backend_admin_static:/app/staticfiles
      - backend_admin_media:/app/media
    depends_on:
      postgres-ml:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ML Service (Django)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: cosmic-ml-service
    restart: unless-stopped
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_ALLOWED_HOSTS: localhost,ml-service,127.0.0.1
      POSTGRES_DB: ${POSTGRES_DB:-cosmic_ml}
      POSTGRES_USER: ${POSTGRES_USER:-mluser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mlpassword}
      POSTGRES_HOST: postgres-ml
      POSTGRES_PORT: 5432
      MONGO_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-changeme}@mongodb:27017
      MONGO_DB_NAME: cosmic-insights
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ""
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_USE_SSL: "False"
      MINIO_BUCKET_DATASETS: datasets
      MINIO_BUCKET_CHECKPOINTS: checkpoints
      MINIO_BUCKET_UPLOADS: uploads
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
      EMBEDDING_DIMENSION: 384
      MAX_SEQUENCE_LENGTH: 512
      EXPRESS_API_URL: http://backend:5000
      EXPRESS_API_KEY: ${EXPRESS_API_KEY:-shared-secret-key-123}
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5000
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    volumes:
      - ./ml-service/app:/app/app
      - ./ml-service/logs:/app/logs
      - ml_service_data:/app/data
    depends_on:
      postgres-ml:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # Celery Worker
  celery-worker:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: cosmic-celery-worker
    restart: unless-stopped
    command: celery -A config worker -l info --concurrency=2
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      POSTGRES_DB: ${POSTGRES_DB:-cosmic_ml}
      POSTGRES_USER: ${POSTGRES_USER:-mluser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mlpassword}
      POSTGRES_HOST: postgres-ml
      POSTGRES_PORT: 5432
      MONGO_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-changeme}@mongodb:27017
      MONGO_DB_NAME: cosmic-insights
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ""
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_USE_SSL: "False"
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
      EMBEDDING_DIMENSION: 384
      MAX_SEQUENCE_LENGTH: 512
    volumes:
      - ./ml-service/app:/app/app
      - ./ml-service/logs:/app/logs
      - ml_service_data:/app/data
    depends_on:
      ml-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cosmic-network

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: cosmic-celery-beat
    restart: unless-stopped
    command: celery -A config beat -l info
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      POSTGRES_DB: ${POSTGRES_DB:-cosmic_ml}
      POSTGRES_USER: ${POSTGRES_USER:-mluser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mlpassword}
      POSTGRES_HOST: postgres-ml
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./ml-service/app:/app/app
    depends_on:
      ml-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cosmic-network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: cosmic-flower
    restart: unless-stopped
    command: celery -A config flower --port=5555
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - cosmic-network

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  backend_node_modules:
    driver: local
  backend_admin_static:
    driver: local
  backend_admin_media:
    driver: local
  postgres_ml_data:
    driver: local
  qdrant_storage:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  ml_service_data:
    driver: local

networks:
  cosmic-network:
    driver: bridge
